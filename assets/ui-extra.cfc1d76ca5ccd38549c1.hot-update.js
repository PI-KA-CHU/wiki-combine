webpackHotUpdate("ui-extra",{

/***/ "./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./client/components/common/page-selector.vue?vue&type=script&lang=js&":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/babel-loader/lib??ref--0-1!./node_modules/vue-loader/lib??vue-loader-options!./client/components/common/page-selector.vue?vue&type=script&lang=js& ***!
  \***************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var lodash_initial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/initial */ \"./node_modules/lodash/initial.js\");\n/* harmony import */ var lodash_initial__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_initial__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_unionBy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/unionBy */ \"./node_modules/lodash/unionBy.js\");\n/* harmony import */ var lodash_unionBy__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_unionBy__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isEmpty */ \"./node_modules/lodash/isEmpty.js\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_last__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/last */ \"./node_modules/lodash/last.js\");\n/* harmony import */ var lodash_last__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_last__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/get */ \"./node_modules/lodash/get.js\");\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_compact__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/compact */ \"./node_modules/lodash/compact.js\");\n/* harmony import */ var lodash_compact__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_compact__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var lodash_find__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/find */ \"./node_modules/lodash/find.js\");\n/* harmony import */ var lodash_find__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_find__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var lodash_delay__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/delay */ \"./node_modules/lodash/delay.js\");\n/* harmony import */ var lodash_delay__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(lodash_delay__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var lodash_some__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/some */ \"./node_modules/lodash/some.js\");\n/* harmony import */ var lodash_some__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(lodash_some__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var lodash_head__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/head */ \"./node_modules/lodash/head.js\");\n/* harmony import */ var lodash_head__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash_head__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var lodash_filter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/filter */ \"./node_modules/lodash/filter.js\");\n/* harmony import */ var lodash_filter__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(lodash_filter__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var lodash_sortBy__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash/sortBy */ \"./node_modules/lodash/sortBy.js\");\n/* harmony import */ var lodash_sortBy__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lodash_sortBy__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var vuex_pathify__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! vuex-pathify */ \"./node_modules/vuex-pathify/dist/vuex-pathify.js\");\n/* harmony import */ var vuex_pathify__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(vuex_pathify__WEBPACK_IMPORTED_MODULE_12__);\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst localeSegmentRegex = /^[A-Z]{2}(-[A-Z]{2})?$/i;\n/* global siteLangs, siteConfig */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: {\n    value: {\n      type: Boolean,\n      default: false\n    },\n    path: {\n      type: String,\n      default: 'new-page'\n    },\n    locale: {\n      type: String,\n      default: 'en'\n    },\n    mode: {\n      type: String,\n      default: 'create'\n    },\n    openHandler: {\n      type: Function,\n      default: () => {}\n    },\n    mustExist: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      deleteDialog: false,\n      treeViewCacheId: 0,\n      searchLoading: false,\n      currentLocale: siteConfig.lang,\n      currentFolderPath: '',\n      currentPath: 'new-page',\n      currentPage: null,\n      currentNode: [0],\n      openNodes: [0],\n      loadedItems: [],\n      batchMove_currentPath: '',\n      batchMove_currentNode: [0],\n      batchMove_openNodes: [0],\n      checkBoxSelectedArray: [],\n      batchMove_tree: [{\n        id: 0,\n        title: '/' + ' (root)',\n        children: []\n      }],\n      tree: [{\n        id: 0,\n        title: '/' + ' (root)',\n        children: []\n      }],\n      pages: [],\n      all: [],\n      namespaces: siteLangs.length ? siteLangs.map(ns => ns.code) : [siteConfig.lang],\n      scrollStyle: {\n        vuescroll: {},\n        scrollPanel: {\n          initialScrollX: 0.01,\n          // fix scrollbar not disappearing on load\n          scrollingX: false,\n          speed: 50\n        },\n        rail: {\n          gutterOfEnds: '2px'\n        },\n        bar: {\n          onlyShowBarOnScroll: false,\n          background: '#999',\n          hoverStyle: {\n            background: '#64B5F6'\n          }\n        }\n      }\n    };\n  },\n\n  computed: {\n    hasAdminPermission: Object(vuex_pathify__WEBPACK_IMPORTED_MODULE_12__[\"get\"])('page/effectivePermissions@system.manage'),\n    isShown: {\n      get() {\n        return this.value;\n      },\n\n      set(val) {\n        this.$emit('input', val);\n      }\n\n    },\n\n    currentPages() {\n      return lodash_sortBy__WEBPACK_IMPORTED_MODULE_11___default()(lodash_filter__WEBPACK_IMPORTED_MODULE_10___default()(this.pages, ['parent', lodash_head__WEBPACK_IMPORTED_MODULE_9___default()(this.currentNode) || 0]), ['title', 'path']);\n    },\n\n    isValidPath() {\n      if (!this.currentPath) {\n        return false;\n      }\n\n      if (this.mustExist && !this.currentPage) {\n        return false;\n      }\n\n      const firstSection = lodash_head__WEBPACK_IMPORTED_MODULE_9___default()(this.currentPath.split('/'));\n\n      if (firstSection.length <= 1) {\n        return false;\n      } else if (localeSegmentRegex.test(firstSection)) {\n        return false;\n      } else if (lodash_some__WEBPACK_IMPORTED_MODULE_8___default()(['login', 'logout', 'register', 'verify', 'favicons', 'fonts', 'img', 'js', 'svg'], p => {\n        return p === firstSection;\n      })) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n\n  },\n  watch: {\n    isShown(newValue, oldValue) {\n      if (newValue && !oldValue) {\n        this.currentPath = this.path;\n        this.currentLocale = this.locale;\n\n        lodash_delay__WEBPACK_IMPORTED_MODULE_7___default()(() => {// this.$refs.pathIpt.focus()\n        });\n      }\n    },\n\n    currentNode(newValue, oldValue) {\n      if (newValue.length < 1) {\n        // force a selection\n        this.$nextTick(() => {\n          this.currentNode = oldValue;\n        });\n      } else {\n        const current = lodash_find__WEBPACK_IMPORTED_MODULE_6___default()(this.all, ['id', newValue[0]]);\n\n        let index = this.openNodes.indexOf(newValue[0]);\n\n        if (index < 0) {\n          // auto open and load children\n          if (current) {\n            if (this.openNodes.indexOf(current.parent) < 0) {\n              this.$nextTick(() => {\n                this.openNodes.push(current.parent);\n              });\n            }\n          }\n\n          this.$nextTick(() => {\n            this.openNodes.push(newValue[0]);\n          });\n        }\n\n        this.currentPath = lodash_compact__WEBPACK_IMPORTED_MODULE_5___default()([lodash_get__WEBPACK_IMPORTED_MODULE_4___default()(current, 'path', ''), lodash_last__WEBPACK_IMPORTED_MODULE_3___default()(this.currentPath.split('/'))]).join('/');\n      }\n    },\n\n    batchMove_currentNode(newValue, oldValue) {\n      console.log('batchMove_currentNode --- ' + newValue + ' --- ' + oldValue);\n\n      if (newValue.length < 1) {\n        // force a selection\n        this.$nextTick(() => {\n          this.batchMove_currentNode = oldValue;\n        });\n      } else {\n        const current = lodash_find__WEBPACK_IMPORTED_MODULE_6___default()(this.all, ['id', newValue[0]]);\n\n        let index = this.batchMove_openNodes.indexOf(newValue[0]);\n\n        if (index < 0) {\n          // auto open and load children\n          if (current) {\n            if (this.batchMove_openNodes.indexOf(current.parent) < 0) {\n              this.$nextTick(() => {\n                this.batchMove_openNodes.push(current.parent);\n              });\n            }\n          }\n\n          this.$nextTick(() => {\n            this.batchMove_openNodes.push(newValue[0]);\n          });\n        } //- this.batchMove_currentPath = _.compact([_.get(current, 'path', ''), _.last(this.batchMove_currentPath.split('/'))]).join('/')\n\n      }\n    },\n\n    currentPage(newValue, oldValue) {\n      if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2___default()(newValue)) {\n        this.currentPath = newValue.path; // 创建模式下给新增路径添加默认值(此处只给页面元素添加page-select列表右侧) ，比如在/home 下点击新增页面路径默认为 /home/page\n\n        if (this.mode === 'create') {\n          this.currentPath += '/new-page';\n        }\n      }\n    },\n\n    currentLocale(newValue, oldValue) {\n      this.$nextTick(() => {\n        this.tree = [{\n          id: 0,\n          title: '/ (root)',\n          children: []\n        }];\n        this.currentNode = [0];\n        this.openNodes = [0];\n        this.pages = [];\n        this.all = [];\n        this.treeViewCacheId += 1;\n      });\n    }\n\n  },\n  methods: {\n    async batchDelete() {\n      const deleteObjectArray = this.checkBoxSelectedArray.map(obj => {\n        return {\n          path: obj.path,\n          isFolder: obj.isFolder\n        };\n      });\n      const resp = await this.$apollo.mutate({\n        mutation: {\n          \"kind\": \"Document\",\n          \"definitions\": [{\n            \"kind\": \"OperationDefinition\",\n            \"operation\": \"mutation\",\n            \"variableDefinitions\": [{\n              \"kind\": \"VariableDefinition\",\n              \"variable\": {\n                \"kind\": \"Variable\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"deleteObjectArray\"\n                }\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"ListType\",\n                  \"type\": {\n                    \"kind\": \"NamedType\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"SourceObject\"\n                    }\n                  }\n                }\n              },\n              \"directives\": []\n            }],\n            \"directives\": [],\n            \"selectionSet\": {\n              \"kind\": \"SelectionSet\",\n              \"selections\": [{\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"pages\"\n                },\n                \"arguments\": [],\n                \"directives\": [],\n                \"selectionSet\": {\n                  \"kind\": \"SelectionSet\",\n                  \"selections\": [{\n                    \"kind\": \"Field\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"batchDelete\"\n                    },\n                    \"arguments\": [{\n                      \"kind\": \"Argument\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"deleteObjectArray\"\n                      },\n                      \"value\": {\n                        \"kind\": \"Variable\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"deleteObjectArray\"\n                        }\n                      }\n                    }],\n                    \"directives\": [],\n                    \"selectionSet\": {\n                      \"kind\": \"SelectionSet\",\n                      \"selections\": [{\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"responseResult\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": [],\n                        \"selectionSet\": {\n                          \"kind\": \"SelectionSet\",\n                          \"selections\": [{\n                            \"kind\": \"Field\",\n                            \"name\": {\n                              \"kind\": \"Name\",\n                              \"value\": \"succeeded\"\n                            },\n                            \"arguments\": [],\n                            \"directives\": []\n                          }, {\n                            \"kind\": \"Field\",\n                            \"name\": {\n                              \"kind\": \"Name\",\n                              \"value\": \"errorCode\"\n                            },\n                            \"arguments\": [],\n                            \"directives\": []\n                          }, {\n                            \"kind\": \"Field\",\n                            \"name\": {\n                              \"kind\": \"Name\",\n                              \"value\": \"slug\"\n                            },\n                            \"arguments\": [],\n                            \"directives\": []\n                          }, {\n                            \"kind\": \"Field\",\n                            \"name\": {\n                              \"kind\": \"Name\",\n                              \"value\": \"message\"\n                            },\n                            \"arguments\": [],\n                            \"directives\": []\n                          }]\n                        }\n                      }]\n                    }\n                  }]\n                }\n              }]\n            }\n          }],\n          \"loc\": {\n            \"start\": 0,\n            \"end\": 410,\n            \"source\": {\n              \"body\": \"\\n          mutation (\\n            $deleteObjectArray: [SourceObject]!\\n          ) {\\n            pages {\\n              batchDelete (\\n                deleteObjectArray: $deleteObjectArray\\n              ) {\\n                responseResult {\\n                  succeeded\\n                  errorCode\\n                  slug\\n                  message\\n                }\\n              }\\n            }\\n          }\\n        \",\n              \"name\": \"GraphQL request\",\n              \"locationOffset\": {\n                \"line\": 1,\n                \"column\": 1\n              }\n            }\n          }\n        },\n        variables: {\n          deleteObjectArray: deleteObjectArray\n        }\n      });\n\n      const result = lodash_get__WEBPACK_IMPORTED_MODULE_4___default()(resp, 'data.pages.batchDelete').responseResult;\n\n      if (result.succeeded) {\n        for (let i = 0; i < this.checkBoxSelectedArray.length; i++) {\n          let obj = this.checkBoxSelectedArray[i];\n          this.removeItemById(this.tree, obj.treeId);\n          this.removeItemById(this.batchMove_tree, obj.treeId);\n        }\n\n        this.checkBoxSelectedArray = [];\n        this.deleteDialog = false;\n      }\n\n      alert(result.message);\n    },\n\n    onNodeActivated(item) {\n      const target = this.all.find(obj => obj.id === item[0]);\n\n      if (target) {\n        this.batchMove_currentPath = target.path;\n      } else {\n        if (item[0] === undefined || item[0] === 0) {\n          this.batchMove_currentPath = '/';\n        } else {\n          console.log('目标文件夹不存在，请重新选择');\n        }\n      }\n\n      console.debug('all：%o --- target：%o', this.all, item);\n    },\n\n    async batchMove() {\n      if (this.checkBoxSelectedArray.length === 0) {\n        alert('请选择要移动的文件夹');\n        return;\n      }\n\n      if (this.batchMove_currentPath === '') {\n        alert('请选择目标文件夹路径');\n        return;\n      }\n\n      const sourceObjectArray = this.checkBoxSelectedArray.map(obj => {\n        return {\n          path: obj.path,\n          isFolder: obj.isFolder\n        };\n      });\n      console.log('移动文件：%o --- 目的地文件夹：%o --- 当前树结构：%o', this.checkBoxSelectedArray, this.batchMove_currentPath, this.all);\n      const resp = await this.$apollo.mutate({\n        mutation: {\n          \"kind\": \"Document\",\n          \"definitions\": [{\n            \"kind\": \"OperationDefinition\",\n            \"operation\": \"mutation\",\n            \"variableDefinitions\": [{\n              \"kind\": \"VariableDefinition\",\n              \"variable\": {\n                \"kind\": \"Variable\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"sourceObjectArray\"\n                }\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"ListType\",\n                  \"type\": {\n                    \"kind\": \"NamedType\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"SourceObject\"\n                    }\n                  }\n                }\n              },\n              \"directives\": []\n            }, {\n              \"kind\": \"VariableDefinition\",\n              \"variable\": {\n                \"kind\": \"Variable\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"targetPath\"\n                }\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"String\"\n                  }\n                }\n              },\n              \"directives\": []\n            }],\n            \"directives\": [],\n            \"selectionSet\": {\n              \"kind\": \"SelectionSet\",\n              \"selections\": [{\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"pages\"\n                },\n                \"arguments\": [],\n                \"directives\": [],\n                \"selectionSet\": {\n                  \"kind\": \"SelectionSet\",\n                  \"selections\": [{\n                    \"kind\": \"Field\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"batchMove\"\n                    },\n                    \"arguments\": [{\n                      \"kind\": \"Argument\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"sourceObjectArray\"\n                      },\n                      \"value\": {\n                        \"kind\": \"Variable\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"sourceObjectArray\"\n                        }\n                      }\n                    }, {\n                      \"kind\": \"Argument\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"targetPath\"\n                      },\n                      \"value\": {\n                        \"kind\": \"Variable\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"targetPath\"\n                        }\n                      }\n                    }],\n                    \"directives\": [],\n                    \"selectionSet\": {\n                      \"kind\": \"SelectionSet\",\n                      \"selections\": [{\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"responseResult\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": [],\n                        \"selectionSet\": {\n                          \"kind\": \"SelectionSet\",\n                          \"selections\": [{\n                            \"kind\": \"Field\",\n                            \"name\": {\n                              \"kind\": \"Name\",\n                              \"value\": \"succeeded\"\n                            },\n                            \"arguments\": [],\n                            \"directives\": []\n                          }, {\n                            \"kind\": \"Field\",\n                            \"name\": {\n                              \"kind\": \"Name\",\n                              \"value\": \"errorCode\"\n                            },\n                            \"arguments\": [],\n                            \"directives\": []\n                          }, {\n                            \"kind\": \"Field\",\n                            \"name\": {\n                              \"kind\": \"Name\",\n                              \"value\": \"slug\"\n                            },\n                            \"arguments\": [],\n                            \"directives\": []\n                          }, {\n                            \"kind\": \"Field\",\n                            \"name\": {\n                              \"kind\": \"Name\",\n                              \"value\": \"message\"\n                            },\n                            \"arguments\": [],\n                            \"directives\": []\n                          }]\n                        }\n                      }]\n                    }\n                  }]\n                }\n              }]\n            }\n          }],\n          \"loc\": {\n            \"start\": 0,\n            \"end\": 481,\n            \"source\": {\n              \"body\": \"\\n          mutation (\\n            $sourceObjectArray: [SourceObject]!\\n            $targetPath: String!\\n          ) {\\n            pages {\\n              batchMove (\\n                sourceObjectArray: $sourceObjectArray\\n                targetPath: $targetPath\\n              ) {\\n                responseResult {\\n                  succeeded\\n                  errorCode\\n                  slug\\n                  message\\n                }\\n              }\\n            }\\n          }\\n        \",\n              \"name\": \"GraphQL request\",\n              \"locationOffset\": {\n                \"line\": 1,\n                \"column\": 1\n              }\n            }\n          }\n        },\n        variables: {\n          sourceObjectArray: sourceObjectArray,\n          targetPath: this.batchMove_currentPath\n        }\n      });\n      console.log('tree：%o', this.tree);\n      console.log('batch-move-resp：%o', resp);\n\n      const result = lodash_get__WEBPACK_IMPORTED_MODULE_4___default()(resp, 'data.pages.batchMove');\n\n      if (result.responseResult.succeeded === true) {\n        // 需要刷新的节点即为当前打开的 + 当前选中的\n        let openNodesCopy = this.openNodes.slice();\n        let batchMoveOpenNodesCopy = this.batchMove_openNodes.slice();\n        if (openNodesCopy.indexOf(this.batchMove_currentNode[0]) === -1) await openNodesCopy.push(this.batchMove_currentNode[0]);\n        if (batchMoveOpenNodesCopy.indexOf(this.batchMove_currentNode[0]) === -1) await batchMoveOpenNodesCopy.push(this.batchMove_currentNode[0]);\n        await openNodesCopy.sort((a, b) => a - b);\n        await batchMoveOpenNodesCopy.sort((a, b) => a - b);\n        console.log('排序后的数组：%o', this.openNodes);\n\n        for (let i = 0; i < openNodesCopy.length; i++) {\n          console.debug('开始查找前节点数据：id：%o --- tree：%o', openNodesCopy[i], this.tree);\n          let item = await this.findTreeItemById(this.tree, openNodesCopy[i]);\n\n          if (item) {\n            await this.fetchFoldersAndPages(item);\n          } else {\n            console.log('找不到树节点 id：%o --- tree：%o', openNodesCopy[i], this.tree);\n          }\n        }\n\n        for (let i = 0; i < batchMoveOpenNodesCopy.length; i++) {\n          let item = await this.findTreeItemById(this.batchMove_tree, batchMoveOpenNodesCopy[i]);\n\n          if (item) {\n            await this.fetchFolders(item);\n          }\n        }\n\n        let currentIndexLeft = this.openNodes.indexOf(this.batchMove_currentNode[0]);\n        let currentIndexRight = this.batchMove_openNodes.indexOf(this.batchMove_currentNode[0]);\n\n        if (currentIndexLeft !== -1) {\n          this.openNodes.splice(currentIndexLeft, 1);\n        }\n\n        if (currentIndexRight !== -1) {\n          this.batchMove_openNodes.splice(currentIndexRight, 1);\n        }\n\n        await this.openNodes.push(this.batchMove_currentNode[0]);\n        await this.batchMove_openNodes.push(this.batchMove_currentNode[0]);\n        this.checkBoxSelectedArray = [];\n      }\n\n      console.log('文件迁移后：tree：%o === this.batchMove_tree：%o', this.tree, this.batchMove_tree);\n      alert(result.responseResult.message);\n    },\n\n    async reloadOpenNodes() {\n      lodash_sortBy__WEBPACK_IMPORTED_MODULE_11___default()(this.openNodes);\n\n      lodash_sortBy__WEBPACK_IMPORTED_MODULE_11___default()(this.batchMove_openNodes);\n\n      console.log('reloadOpenNodes：this.openNodes：%o === this.batchMove_openNodes：%o', this.openNodes, this.batchMove_openNodes);\n\n      for (let i = 0; i < this.openNodes.length; i++) {\n        let sourceTreeOpenItem = await this.findTreeItemById(this.tree, this.openNodes[i]);\n        await this.fetchFoldersAndPages(sourceTreeOpenItem);\n      }\n\n      for (let i = 0; i < this.batchMove_currentNode.length; i++) {\n        let targetTreeOpenItem = await this.findTreeItemById(this.batchMove_tree, this.batchMove_openNodes[i]);\n        await this.fetchFolders(targetTreeOpenItem);\n      }\n    },\n\n    findTreeItemById(tree, id) {\n      for (let i = 0; i < tree.length; i++) {\n        const node = tree[i];\n\n        if (node.id === id) {\n          return node;\n        }\n\n        if (node.children) {\n          const foundNode = this.findTreeItemById(node.children, id);\n\n          if (foundNode) {\n            return foundNode;\n          }\n        }\n      }\n\n      return null;\n    },\n\n    removeItemById(tree, id) {\n      for (let i = 0; i < tree.length; i++) {\n        const item = tree[i];\n\n        if (item.id === id) {\n          tree.splice(i, 1);\n          return true;\n        }\n\n        if (item.children && this.removeItemById(item.children, id)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    addToTree(tree, nodeId, newNode) {\n      for (let node of tree) {\n        if (node.id === nodeId) {\n          if (!node.children) {\n            node.children = [];\n          }\n\n          newNode.path = node.path + '/' + lodash_last__WEBPACK_IMPORTED_MODULE_3___default()(newNode.path.split('/'));\n          newNode.parent = node.id;\n          node.children.push(newNode);\n          return true;\n        }\n\n        if (node.children && node.children.length > 0) {\n          const added = this.addToTree(node.children, nodeId, newNode);\n\n          if (added) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n\n    onCheckboxChange(event, item) {\n      const isChecked = event;\n\n      if (isChecked) {\n        let ancestors = item.ancestors;\n        const isFatherInSeleted = this.checkBoxSelectedArray.some(item => ancestors.includes(item.treeId));\n\n        if (!isFatherInSeleted) {\n          this.checkBoxSelectedArray.push({\n            treeId: item.id,\n            pageId: item.pageId,\n            path: item.path,\n            isFolder: item.isFolder,\n            ancestors: item.ancestors,\n            parent: item.parent\n          });\n        }\n      } else {\n        let index = this.checkBoxSelectedArray.findIndex(obj => obj.treeId === item.id);\n\n        if (index !== -1) {\n          this.checkBoxSelectedArray.splice(index, 1);\n        }\n      }\n\n      console.log('checkBoxSelectedArray：%o ---- event：%o ---- item：%o', this.checkBoxSelectedArray, event, item);\n    },\n\n    close() {\n      this.isShown = false;\n    },\n\n    open() {\n      const exit = this.openHandler({\n        locale: this.currentLocale,\n        path: this.currentPath,\n        id: this.mustExist && this.currentPage ? this.currentPage.pageId : 0\n      });\n\n      if (exit !== false) {\n        this.close();\n      }\n    },\n\n    async fetchFolders(item) {\n      console.log('构建【fetchFolders】目录树，item：{}', item);\n\n      if (item.isLoaded) {\n        return;\n      }\n\n      this.searchLoading = true;\n      const resp = await this.$apollo.query({\n        query: {\n          \"kind\": \"Document\",\n          \"definitions\": [{\n            \"kind\": \"OperationDefinition\",\n            \"operation\": \"query\",\n            \"variableDefinitions\": [{\n              \"kind\": \"VariableDefinition\",\n              \"variable\": {\n                \"kind\": \"Variable\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"parent\"\n                }\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"Int\"\n                  }\n                }\n              },\n              \"directives\": []\n            }, {\n              \"kind\": \"VariableDefinition\",\n              \"variable\": {\n                \"kind\": \"Variable\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"mode\"\n                }\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"PageTreeMode\"\n                  }\n                }\n              },\n              \"directives\": []\n            }, {\n              \"kind\": \"VariableDefinition\",\n              \"variable\": {\n                \"kind\": \"Variable\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"locale\"\n                }\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"String\"\n                  }\n                }\n              },\n              \"directives\": []\n            }],\n            \"directives\": [],\n            \"selectionSet\": {\n              \"kind\": \"SelectionSet\",\n              \"selections\": [{\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"pages\"\n                },\n                \"arguments\": [],\n                \"directives\": [],\n                \"selectionSet\": {\n                  \"kind\": \"SelectionSet\",\n                  \"selections\": [{\n                    \"kind\": \"Field\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"tree\"\n                    },\n                    \"arguments\": [{\n                      \"kind\": \"Argument\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"parent\"\n                      },\n                      \"value\": {\n                        \"kind\": \"Variable\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"parent\"\n                        }\n                      }\n                    }, {\n                      \"kind\": \"Argument\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"mode\"\n                      },\n                      \"value\": {\n                        \"kind\": \"Variable\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"mode\"\n                        }\n                      }\n                    }, {\n                      \"kind\": \"Argument\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"locale\"\n                      },\n                      \"value\": {\n                        \"kind\": \"Variable\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"locale\"\n                        }\n                      }\n                    }],\n                    \"directives\": [],\n                    \"selectionSet\": {\n                      \"kind\": \"SelectionSet\",\n                      \"selections\": [{\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"id\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }, {\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"path\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }, {\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"title\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }, {\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"isFolder\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }, {\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"pageId\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }, {\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"parent\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }]\n                    }\n                  }]\n                }\n              }]\n            }\n          }],\n          \"loc\": {\n            \"start\": 0,\n            \"end\": 346,\n            \"source\": {\n              \"body\": \"\\n          query ($parent: Int!, $mode: PageTreeMode!, $locale: String!) {\\n            pages {\\n              tree(parent: $parent, mode: $mode, locale: $locale) {\\n                id\\n                path\\n                title\\n                isFolder\\n                pageId\\n                parent\\n              }\\n            }\\n          }\\n        \",\n              \"name\": \"GraphQL request\",\n              \"locationOffset\": {\n                \"line\": 1,\n                \"column\": 1\n              }\n            }\n          }\n        },\n        fetchPolicy: 'network-only',\n        variables: {\n          parent: item.id,\n          mode: 'ALL',\n          locale: this.currentLocale\n        }\n      });\n\n      const items = lodash_get__WEBPACK_IMPORTED_MODULE_4___default()(resp, 'data.pages.tree', []);\n\n      const itemFolders = lodash_filter__WEBPACK_IMPORTED_MODULE_10___default()(items, ['isFolder', true]).map(f => ({ ...f,\n        children: [],\n        checked: false\n      }));\n\n      const itemPages = lodash_filter__WEBPACK_IMPORTED_MODULE_10___default()(items, i => i.pageId > 0).map(f => ({ ...f,\n        checked: false\n      }));\n\n      console.log('itemFolders：%o', itemFolders);\n\n      if (itemFolders.length > 0) {\n        item.children = itemFolders;\n      } else {\n        item.children = undefined;\n      }\n\n      this.pages = lodash_unionBy__WEBPACK_IMPORTED_MODULE_1___default()(this.pages, itemPages, 'id');\n      this.all = lodash_unionBy__WEBPACK_IMPORTED_MODULE_1___default()(this.all, items, 'id');\n      this.searchLoading = false;\n    },\n\n    async fetchFoldersAndPages(item) {\n      console.log('构建【fetchFoldersAndPages】目录树，item：{}', item);\n\n      if (item.isLoaded) {\n        return;\n      }\n\n      this.searchLoading = true;\n      const resp = await this.$apollo.query({\n        query: {\n          \"kind\": \"Document\",\n          \"definitions\": [{\n            \"kind\": \"OperationDefinition\",\n            \"operation\": \"query\",\n            \"variableDefinitions\": [{\n              \"kind\": \"VariableDefinition\",\n              \"variable\": {\n                \"kind\": \"Variable\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"parent\"\n                }\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"Int\"\n                  }\n                }\n              },\n              \"directives\": []\n            }, {\n              \"kind\": \"VariableDefinition\",\n              \"variable\": {\n                \"kind\": \"Variable\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"mode\"\n                }\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"PageTreeMode\"\n                  }\n                }\n              },\n              \"directives\": []\n            }, {\n              \"kind\": \"VariableDefinition\",\n              \"variable\": {\n                \"kind\": \"Variable\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"locale\"\n                }\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"String\"\n                  }\n                }\n              },\n              \"directives\": []\n            }],\n            \"directives\": [],\n            \"selectionSet\": {\n              \"kind\": \"SelectionSet\",\n              \"selections\": [{\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"pages\"\n                },\n                \"arguments\": [],\n                \"directives\": [],\n                \"selectionSet\": {\n                  \"kind\": \"SelectionSet\",\n                  \"selections\": [{\n                    \"kind\": \"Field\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"tree\"\n                    },\n                    \"arguments\": [{\n                      \"kind\": \"Argument\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"parent\"\n                      },\n                      \"value\": {\n                        \"kind\": \"Variable\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"parent\"\n                        }\n                      }\n                    }, {\n                      \"kind\": \"Argument\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"mode\"\n                      },\n                      \"value\": {\n                        \"kind\": \"Variable\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"mode\"\n                        }\n                      }\n                    }, {\n                      \"kind\": \"Argument\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"locale\"\n                      },\n                      \"value\": {\n                        \"kind\": \"Variable\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"locale\"\n                        }\n                      }\n                    }],\n                    \"directives\": [],\n                    \"selectionSet\": {\n                      \"kind\": \"SelectionSet\",\n                      \"selections\": [{\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"id\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }, {\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"path\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }, {\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"title\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }, {\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"isFolder\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }, {\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"pageId\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }, {\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"parent\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }, {\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"ancestors\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }]\n                    }\n                  }]\n                }\n              }]\n            }\n          }],\n          \"loc\": {\n            \"start\": 0,\n            \"end\": 372,\n            \"source\": {\n              \"body\": \"\\n          query ($parent: Int!, $mode: PageTreeMode!, $locale: String!) {\\n            pages {\\n              tree(parent: $parent, mode: $mode, locale: $locale) {\\n                id\\n                path\\n                title\\n                isFolder\\n                pageId\\n                parent\\n                ancestors\\n              }\\n            }\\n          }\\n        \",\n              \"name\": \"GraphQL request\",\n              \"locationOffset\": {\n                \"line\": 1,\n                \"column\": 1\n              }\n            }\n          }\n        },\n        fetchPolicy: 'network-only',\n        variables: {\n          parent: item.id,\n          mode: 'ALL',\n          locale: this.currentLocale\n        }\n      });\n\n      const items = lodash_get__WEBPACK_IMPORTED_MODULE_4___default()(resp, 'data.pages.tree', []);\n\n      const itemFolders = lodash_filter__WEBPACK_IMPORTED_MODULE_10___default()(items, ['isFolder', true]).map(f => ({ ...f,\n        children: [],\n        checked: false\n      }));\n\n      const itemPages = lodash_filter__WEBPACK_IMPORTED_MODULE_10___default()(items, i => i.pageId > 0).map(f => ({ ...f,\n        checked: false\n      }));\n\n      console.log('itemFolders：%o ===== itemPages：%o', itemFolders, itemPages);\n\n      if (itemFolders.length > 0 || itemPages.length > 0) {\n        item.children = [...itemFolders, ...itemPages];\n      } else {\n        item.children = undefined;\n      }\n\n      this.pages = lodash_unionBy__WEBPACK_IMPORTED_MODULE_1___default()(this.pages, itemPages, 'id');\n      this.all = lodash_unionBy__WEBPACK_IMPORTED_MODULE_1___default()(this.all, items, 'id');\n      this.searchLoading = false;\n    },\n\n    async editFolder(item) {\n      item.editing = true; // 等待tree-view下拉目录渲染完毕\n\n      await new Promise(resolve => {\n        setTimeout(resolve, 100);\n      });\n      this.$nextTick(() => {\n        let input = document.getElementById(`input-${item.id}`);\n        console.log('item：%o ===== input：%o', item, input);\n        input.focus();\n        input.select();\n        input.addEventListener('blur', async () => {\n          if (item.editing === true) {\n            item.editing = false;\n            await this.renameFolder(item, input.value);\n          }\n        });\n        input.addEventListener('keydown', async event => {\n          if (event.key === 'Enter' || event.key === 'Esc') {\n            item.editing = false;\n            await this.renameFolder(item, input.value);\n          }\n        });\n      });\n    },\n\n    async renameFolder(item, newName) {\n      let oldPath = item.path;\n      let newPath = lodash_initial__WEBPACK_IMPORTED_MODULE_0___default()(item.path.split('/')).join('/') + ('/' + newName); // 去除地址前后的'/'\n\n      newPath = newPath.trim().replace(/^\\/|\\/$/g, '');\n      oldPath = oldPath.trim().replace(/^\\/|\\/$/g, '');\n      let sourceFileItem = this.findTreeItemById(this.tree, item.parent);\n      let sourceFileList = sourceFileItem ? sourceFileItem.children : [];\n      let targetFileItem = this.findTreeItemById(this.batchMove_tree, item.parent);\n      let targetFileList = targetFileItem ? targetFileItem.children : [];\n      let fileList = [...sourceFileList, ...targetFileList];\n      let index = fileList.findIndex(file => file.path === newPath);\n      console.debug('filelist: %o', fileList);\n\n      if (index !== -1) {\n        alert('重复文件名: ' + item.title);\n        item.title = lodash_last__WEBPACK_IMPORTED_MODULE_3___default()(item.path.split('/'));\n        return;\n      }\n\n      console.log('newPath：' + newPath);\n      if (oldPath === newPath) return;\n      await this.updateFolderName(oldPath, newPath, item.isFolder);\n      let sourceUpdateItem = this.findTreeItemById(this.tree, item.parent);\n      let targetUpdateItem = this.findTreeItemById(this.batchMove_tree, item.parent);\n      this.fetchFoldersAndPages(sourceUpdateItem);\n      this.fetchFolders(targetUpdateItem);\n      await this.openNodes.sort();\n      await this.batchMove_openNodes.sort();\n\n      for (let i = 0; i < this.openNodes.length; i++) {\n        let item = await this.findTreeItemById(this.tree, this.openNodes[i]);\n        console.debug('%o--sourceTree: %o === targetTree-%o: %o', item, this.tree, this.batchMove_tree);\n        await this.fetchFoldersAndPages(item);\n      }\n\n      for (let i = 0; i < this.batchMove_openNodes.length; i++) {\n        let item = await this.findTreeItemById(this.batchMove_tree, this.batchMove_openNodes[i]);\n        await this.fetchFolders(item);\n      }\n    },\n\n    async updateFolderName(oldPath, newPath, isFolder) {\n      let resp = await this.$apollo.mutate({\n        mutation: {\n          \"kind\": \"Document\",\n          \"definitions\": [{\n            \"kind\": \"OperationDefinition\",\n            \"operation\": \"mutation\",\n            \"variableDefinitions\": [{\n              \"kind\": \"VariableDefinition\",\n              \"variable\": {\n                \"kind\": \"Variable\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"oldPath\"\n                }\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"String\"\n                  }\n                }\n              },\n              \"directives\": []\n            }, {\n              \"kind\": \"VariableDefinition\",\n              \"variable\": {\n                \"kind\": \"Variable\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"newPath\"\n                }\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"String\"\n                  }\n                }\n              },\n              \"directives\": []\n            }, {\n              \"kind\": \"VariableDefinition\",\n              \"variable\": {\n                \"kind\": \"Variable\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"isFolder\"\n                }\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"Boolean\"\n                  }\n                }\n              },\n              \"directives\": []\n            }],\n            \"directives\": [],\n            \"selectionSet\": {\n              \"kind\": \"SelectionSet\",\n              \"selections\": [{\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"pages\"\n                },\n                \"arguments\": [],\n                \"directives\": [],\n                \"selectionSet\": {\n                  \"kind\": \"SelectionSet\",\n                  \"selections\": [{\n                    \"kind\": \"Field\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"updateFolderPath\"\n                    },\n                    \"arguments\": [{\n                      \"kind\": \"Argument\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"oldPath\"\n                      },\n                      \"value\": {\n                        \"kind\": \"Variable\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"oldPath\"\n                        }\n                      }\n                    }, {\n                      \"kind\": \"Argument\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"newPath\"\n                      },\n                      \"value\": {\n                        \"kind\": \"Variable\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"newPath\"\n                        }\n                      }\n                    }, {\n                      \"kind\": \"Argument\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"isFolder\"\n                      },\n                      \"value\": {\n                        \"kind\": \"Variable\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"isFolder\"\n                        }\n                      }\n                    }],\n                    \"directives\": [],\n                    \"selectionSet\": {\n                      \"kind\": \"SelectionSet\",\n                      \"selections\": [{\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"responseResult\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": [],\n                        \"selectionSet\": {\n                          \"kind\": \"SelectionSet\",\n                          \"selections\": [{\n                            \"kind\": \"Field\",\n                            \"name\": {\n                              \"kind\": \"Name\",\n                              \"value\": \"succeeded\"\n                            },\n                            \"arguments\": [],\n                            \"directives\": []\n                          }, {\n                            \"kind\": \"Field\",\n                            \"name\": {\n                              \"kind\": \"Name\",\n                              \"value\": \"errorCode\"\n                            },\n                            \"arguments\": [],\n                            \"directives\": []\n                          }, {\n                            \"kind\": \"Field\",\n                            \"name\": {\n                              \"kind\": \"Name\",\n                              \"value\": \"slug\"\n                            },\n                            \"arguments\": [],\n                            \"directives\": []\n                          }, {\n                            \"kind\": \"Field\",\n                            \"name\": {\n                              \"kind\": \"Name\",\n                              \"value\": \"message\"\n                            },\n                            \"arguments\": [],\n                            \"directives\": []\n                          }]\n                        }\n                      }]\n                    }\n                  }]\n                }\n              }]\n            }\n          }],\n          \"loc\": {\n            \"start\": 0,\n            \"end\": 509,\n            \"source\": {\n              \"body\": \"\\n          mutation (\\n            $oldPath: String!,\\n            $newPath: String!,\\n            $isFolder: Boolean!\\n          ) {\\n            pages {\\n              updateFolderPath(\\n                oldPath: $oldPath,\\n                newPath: $newPath\\n                isFolder: $isFolder\\n              ) {\\n                responseResult {\\n                  succeeded\\n                  errorCode\\n                  slug\\n                  message\\n                }\\n              }\\n            }\\n          }\\n      \",\n              \"name\": \"GraphQL request\",\n              \"locationOffset\": {\n                \"line\": 1,\n                \"column\": 1\n              }\n            }\n          }\n        },\n        variables: {\n          oldPath: oldPath,\n          newPath: newPath,\n          isFolder: isFolder\n        }\n      });\n      console.log('add page resp：', resp);\n      resp = lodash_get__WEBPACK_IMPORTED_MODULE_4___default()(resp, 'data.pages.updateFolderPath', {});\n      alert(resp.responseResult.message);\n    },\n\n    async createFolder(item) {\n      let batchMoveFlag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      console.log('createFoler');\n      this.newName = '';\n      const folderId = Math.floor(Math.random() * 1000000000);\n      const newFolder = {\n        id: folderId,\n        title: '',\n        children: [],\n        editing: true,\n        isFolder: true,\n        path: '',\n        parent: item.id\n      };\n      await this.fetchFolders(item);\n\n      if (!item.children) {\n        item.children = [];\n      }\n\n      await item.children.push(newFolder);\n      let openNodes = this.openNodes;\n\n      if (batchMoveFlag) {\n        openNodes = this.batchMove_openNodes;\n      } // 保持当前文件夹下拉状态\n\n\n      if (openNodes.indexOf(0) === -1) {\n        await openNodes.push(0);\n      }\n\n      if (openNodes.indexOf(item.id) === -1) {\n        await openNodes.push(item.id);\n      } // 等待tree-view下拉目录渲染完毕\n\n\n      await new Promise(resolve => {\n        setTimeout(resolve, 500);\n      });\n      this.$nextTick(() => {\n        const input = document.getElementById(`input-${newFolder.id}`);\n        input.focus();\n        input.select();\n        input.addEventListener('blur', async () => {\n          if (newFolder.editing === true) {\n            newFolder.editing = false;\n\n            if (item.path !== undefined) {\n              newFolder.path += item.path;\n            }\n\n            newFolder.path += '/' + input.value;\n            console.log('item.path：' + newFolder.path);\n            let uploadFolderId = await this.uploadFolder(input, item, folderId);\n            newFolder.id = uploadFolderId;\n            await this.fetchFolders(item);\n            let sourceTreeItem = this.findTreeItemById(this.tree, item.id);\n            if (sourceTreeItem) await this.fetchFoldersAndPages(sourceTreeItem);\n          }\n        });\n        input.addEventListener('keydown', async event => {\n          if (event.key === 'Enter' || event.key === 'Esc') {\n            if (newFolder.editing === true) {\n              newFolder.editing = false;\n\n              if (item.path !== undefined) {\n                newFolder.path += item.path;\n              }\n\n              newFolder.path += '/' + input.value;\n              let uploadFolderId = await this.uploadFolder(input, item, folderId);\n              newFolder.id = uploadFolderId;\n              await this.fetchFolders(item);\n              let sourceTreeItem = this.findTreeItemById(this.tree, item.id);\n              if (sourceTreeItem) await this.fetchFoldersAndPages(sourceTreeItem);\n            }\n          }\n        });\n      });\n    },\n\n    async uploadFolder(input, item, folderId) {\n      console.log('this.currentNode：' + this.currentNode);\n      const inputValue = input.value;\n\n      if (inputValue === '' || inputValue === undefined) {\n        console.log('删除文件名为空的文件夹, id-{}', input.id);\n        item.children = item.children.filter(child => child.id !== folderId);\n        return;\n      }\n\n      const targetItem = item.children.filter(child => child.id === folderId);\n      console.log('targetItem：{}', targetItem[0].path);\n      let resp = await this.$apollo.mutate({\n        mutation: {\n          \"kind\": \"Document\",\n          \"definitions\": [{\n            \"kind\": \"OperationDefinition\",\n            \"operation\": \"mutation\",\n            \"variableDefinitions\": [{\n              \"kind\": \"VariableDefinition\",\n              \"variable\": {\n                \"kind\": \"Variable\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"path\"\n                }\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"String\"\n                  }\n                }\n              },\n              \"directives\": []\n            }, {\n              \"kind\": \"VariableDefinition\",\n              \"variable\": {\n                \"kind\": \"Variable\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"locale\"\n                }\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"String\"\n                  }\n                }\n              },\n              \"directives\": []\n            }],\n            \"directives\": [],\n            \"selectionSet\": {\n              \"kind\": \"SelectionSet\",\n              \"selections\": [{\n                \"kind\": \"Field\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"pages\"\n                },\n                \"arguments\": [],\n                \"directives\": [],\n                \"selectionSet\": {\n                  \"kind\": \"SelectionSet\",\n                  \"selections\": [{\n                    \"kind\": \"Field\",\n                    \"name\": {\n                      \"kind\": \"Name\",\n                      \"value\": \"addPageTree\"\n                    },\n                    \"arguments\": [{\n                      \"kind\": \"Argument\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"path\"\n                      },\n                      \"value\": {\n                        \"kind\": \"Variable\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"path\"\n                        }\n                      }\n                    }, {\n                      \"kind\": \"Argument\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"locale\"\n                      },\n                      \"value\": {\n                        \"kind\": \"Variable\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"locale\"\n                        }\n                      }\n                    }],\n                    \"directives\": [],\n                    \"selectionSet\": {\n                      \"kind\": \"SelectionSet\",\n                      \"selections\": [{\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"responseResult\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": [],\n                        \"selectionSet\": {\n                          \"kind\": \"SelectionSet\",\n                          \"selections\": [{\n                            \"kind\": \"Field\",\n                            \"name\": {\n                              \"kind\": \"Name\",\n                              \"value\": \"succeeded\"\n                            },\n                            \"arguments\": [],\n                            \"directives\": []\n                          }, {\n                            \"kind\": \"Field\",\n                            \"name\": {\n                              \"kind\": \"Name\",\n                              \"value\": \"errorCode\"\n                            },\n                            \"arguments\": [],\n                            \"directives\": []\n                          }, {\n                            \"kind\": \"Field\",\n                            \"name\": {\n                              \"kind\": \"Name\",\n                              \"value\": \"slug\"\n                            },\n                            \"arguments\": [],\n                            \"directives\": []\n                          }, {\n                            \"kind\": \"Field\",\n                            \"name\": {\n                              \"kind\": \"Name\",\n                              \"value\": \"message\"\n                            },\n                            \"arguments\": [],\n                            \"directives\": []\n                          }]\n                        }\n                      }, {\n                        \"kind\": \"Field\",\n                        \"name\": {\n                          \"kind\": \"Name\",\n                          \"value\": \"pageId\"\n                        },\n                        \"arguments\": [],\n                        \"directives\": []\n                      }]\n                    }\n                  }]\n                }\n              }]\n            }\n          }],\n          \"loc\": {\n            \"start\": 0,\n            \"end\": 447,\n            \"source\": {\n              \"body\": \"\\n          mutation (\\n            $path: String!,\\n            $locale: String!\\n          ) {\\n            pages {\\n              addPageTree(\\n                path: $path,\\n                locale: $locale\\n              ) {\\n                responseResult {\\n                  succeeded\\n                  errorCode\\n                  slug\\n                  message\\n                },\\n                pageId\\n              }\\n            }\\n          }\\n      \",\n              \"name\": \"GraphQL request\",\n              \"locationOffset\": {\n                \"line\": 1,\n                \"column\": 1\n              }\n            }\n          }\n        },\n        variables: {\n          path: targetItem[0].path,\n          locale: this.$store.get('page/locale')\n        }\n      });\n      console.log('add page resp：', resp);\n      resp = lodash_get__WEBPACK_IMPORTED_MODULE_4___default()(resp, 'data.pages.create', {});\n    }\n\n  }\n});\n\n//# sourceURL=webpack:///./client/components/common/page-selector.vue?./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/babel-loader/lib??ref--0-1!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/pug-plain-loader/index.js!./node_modules/vue-loader/lib/index.js?!./client/components/common/page-selector.vue?vue&type=template&id=53de4b5c&lang=pug&":
/*!**********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/pug-plain-loader!./node_modules/vue-loader/lib??vue-loader-options!./client/components/common/page-selector.vue?vue&type=template&id=53de4b5c&lang=pug& ***!
  \**********************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"v-dialog\",\n    {\n      attrs: {\n        \"max-width\": \"850px\",\n        \"overlay-color\": \"blue darken-4\",\n        \"overlay-opacity\": \".7\",\n      },\n      model: {\n        value: _vm.isShown,\n        callback: function ($$v) {\n          _vm.isShown = $$v\n        },\n        expression: \"isShown\",\n      },\n    },\n    [\n      _vm.mode !== \"batch-move\"\n        ? _c(\n            \"v-card\",\n            { staticClass: \"page-selector\", attrs: { minWidth: 818 } },\n            [\n              _c(\n                \"div\",\n                { staticClass: \"dialog-header is-blue\" },\n                [\n                  _c(\n                    \"v-icon\",\n                    { staticClass: \"mr-3\", attrs: { color: \"white\" } },\n                    [_vm._v(\"mdi-page-next-outline\")]\n                  ),\n                  _vm.mode === \"create\"\n                    ? _c(\"div\", { staticClass: \"body-1\" }, [\n                        _vm._v(\n                          _vm._s(_vm.$t(\"common:pageSelector.createTitle\"))\n                        ),\n                      ])\n                    : _vm.mode === \"move\"\n                    ? _c(\"div\", { staticClass: \"body-1\" }, [\n                        _vm._v(_vm._s(_vm.$t(\"common:pageSelector.moveTitle\"))),\n                      ])\n                    : _vm.mode === \"select\"\n                    ? _c(\"div\", { staticClass: \"body-1\" }, [\n                        _vm._v(\n                          _vm._s(_vm.$t(\"common:pageSelector.selectTitle\"))\n                        ),\n                      ])\n                    : _vm._e(),\n                  _c(\"v-spacer\"),\n                  _c(\"v-progress-circular\", {\n                    directives: [\n                      {\n                        name: \"show\",\n                        rawName: \"v-show\",\n                        value: _vm.searchLoading,\n                        expression: \"searchLoading\",\n                      },\n                    ],\n                    attrs: {\n                      indeterminate: \"\",\n                      color: \"white\",\n                      size: 20,\n                      width: 2,\n                    },\n                  }),\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"d-flex\" },\n                [\n                  _c(\n                    \"v-flex\",\n                    {\n                      staticClass: \"grey\",\n                      class: _vm.$vuetify.theme.dark ? \"darken-4\" : \"lighten-3\",\n                      attrs: { xs5: \"\" },\n                    },\n                    [\n                      _c(\n                        \"v-toolbar\",\n                        {\n                          attrs: {\n                            color: \"grey darken-3\",\n                            dark: \"\",\n                            dense: \"\",\n                            flat: \"\",\n                          },\n                        },\n                        [\n                          _c(\"div\", { staticClass: \"body-2\" }, [\n                            _vm._v(\n                              _vm._s(\n                                _vm.$t(\"common:pageSelector.virtualFolders\")\n                              )\n                            ),\n                          ]),\n                          _c(\"v-spacer\"),\n                          _vm.path === \"home\" && _vm.mode === \"move\"\n                            ? _c(\n                                \"v-btn\",\n                                {\n                                  attrs: {\n                                    icon: \"\",\n                                    tile: \"\",\n                                    href: \"https://docs.requarks.io/guide/pages#folders\",\n                                    target: \"_blank\",\n                                  },\n                                },\n                                [_c(\"v-icon\", [_vm._v(\"mdi-help-box\")])],\n                                1\n                              )\n                            : _vm._e(),\n                        ],\n                        1\n                      ),\n                      _c(\n                        \"div\",\n                        { staticStyle: { height: \"400px\" } },\n                        [\n                          _c(\n                            \"vue-scroll\",\n                            { attrs: { ops: _vm.scrollStyle } },\n                            [\n                              _c(\"v-treeview\", {\n                                key: \"pageTree-\" + _vm.treeViewCacheId,\n                                attrs: {\n                                  active: _vm.currentNode,\n                                  open: _vm.openNodes,\n                                  items: _vm.tree,\n                                  \"load-children\": _vm.fetchFolders,\n                                  \"expand-icon\": \"mdi-menu-down-outline\",\n                                  \"item-id\": \"path\",\n                                  \"item-text\": \"title\",\n                                  dense: \"\",\n                                  activatable: \"\",\n                                },\n                                on: {\n                                  \"update:active\": function ($event) {\n                                    _vm.currentNode = $event\n                                  },\n                                  \"update:open\": function ($event) {\n                                    _vm.openNodes = $event\n                                  },\n                                },\n                                scopedSlots: _vm._u(\n                                  [\n                                    {\n                                      key: \"prepend\",\n                                      fn: function (ref) {\n                                        var item = ref.item\n                                        var open = ref.open\n                                        var leaf = ref.leaf\n                                        return [\n                                          _c(\"v-icon\", [\n                                            _vm._v(\n                                              \"mdi-\" +\n                                                _vm._s(\n                                                  open\n                                                    ? \"folder-open\"\n                                                    : \"folder\"\n                                                )\n                                            ),\n                                          ]),\n                                        ]\n                                      },\n                                    },\n                                    {\n                                      key: \"label\",\n                                      fn: function (ref) {\n                                        var item = ref.item\n                                        return [\n                                          _c(\"v-hover\", {\n                                            scopedSlots: _vm._u(\n                                              [\n                                                {\n                                                  key: \"default\",\n                                                  fn: function (ref) {\n                                                    var hover = ref.hover\n                                                    return [\n                                                      _c(\n                                                        \"div\",\n                                                        [\n                                                          !item.editing\n                                                            ? _c(\"span\", [\n                                                                _vm._v(\n                                                                  _vm._s(\n                                                                    item.title\n                                                                  )\n                                                                ),\n                                                              ])\n                                                            : _vm._e(),\n                                                          _vm._v(\" \"),\n                                                          hover &&\n                                                          !item.editing &&\n                                                          _vm.hasAdminPermission\n                                                            ? _c(\"v-icon\", {\n                                                                staticClass:\n                                                                  \"mdi mdi-plus\",\n                                                                class: {\n                                                                  \"icon-operate\":\n                                                                    hover,\n                                                                },\n                                                                staticStyle: {\n                                                                  \"margin-right\":\n                                                                    \"0.5em\",\n                                                                },\n                                                                on: {\n                                                                  click:\n                                                                    function (\n                                                                      $event\n                                                                    ) {\n                                                                      return _vm.createFolder(\n                                                                        item,\n                                                                        true\n                                                                      )\n                                                                    },\n                                                                },\n                                                              })\n                                                            : _vm._e(),\n                                                          _vm._v(\" \"),\n                                                          item.id != 0 &&\n                                                          hover &&\n                                                          !item.editing &&\n                                                          _vm.hasAdminPermission\n                                                            ? _c(\"v-icon\", {\n                                                                staticClass:\n                                                                  \"mdi mdi-pencil\",\n                                                                class: {\n                                                                  \"icon-operate\":\n                                                                    hover,\n                                                                },\n                                                                on: {\n                                                                  click:\n                                                                    function (\n                                                                      $event\n                                                                    ) {\n                                                                      return _vm.editFolder(\n                                                                        item\n                                                                      )\n                                                                    },\n                                                                },\n                                                              })\n                                                            : _vm._e(),\n                                                          _vm._v(\" \"),\n                                                          item.editing\n                                                            ? _c(\n                                                                \"v-text-field\",\n                                                                {\n                                                                  ref:\n                                                                    \"input-\" +\n                                                                    item.id,\n                                                                  attrs: {\n                                                                    id:\n                                                                      \"input-\" +\n                                                                      item.id,\n                                                                    \"hide-details\":\n                                                                      \"\",\n                                                                    solo: \"\",\n                                                                    \"hide-details\":\n                                                                      \"\",\n                                                                    dense: \"\",\n                                                                    flat: \"\",\n                                                                    clearable:\n                                                                      \"\",\n                                                                  },\n                                                                  model: {\n                                                                    value:\n                                                                      item.title,\n                                                                    callback:\n                                                                      function (\n                                                                        $$v\n                                                                      ) {\n                                                                        _vm.$set(\n                                                                          item,\n                                                                          \"title\",\n                                                                          $$v\n                                                                        )\n                                                                      },\n                                                                    expression:\n                                                                      \"item.title\",\n                                                                  },\n                                                                }\n                                                              )\n                                                            : _vm._e(),\n                                                        ],\n                                                        1\n                                                      ),\n                                                    ]\n                                                  },\n                                                },\n                                              ],\n                                              null,\n                                              true\n                                            ),\n                                          }),\n                                        ]\n                                      },\n                                    },\n                                  ],\n                                  null,\n                                  false,\n                                  3018793491\n                                ),\n                              }),\n                            ],\n                            1\n                          ),\n                        ],\n                        1\n                      ),\n                    ],\n                    1\n                  ),\n                  _c(\n                    \"v-flex\",\n                    { attrs: { xs7: \"\" } },\n                    [\n                      _c(\n                        \"v-toolbar\",\n                        {\n                          attrs: {\n                            color: \"blue darken-2\",\n                            dark: \"\",\n                            dense: \"\",\n                            flat: \"\",\n                          },\n                        },\n                        [\n                          _c(\"div\", { staticClass: \"body-2\" }, [\n                            _vm._v(_vm._s(_vm.$t(\"common:pageSelector.pages\"))),\n                          ]),\n                        ]\n                      ),\n                      _vm.currentPages.length > 0\n                        ? _c(\n                            \"div\",\n                            { staticStyle: { height: \"400px\" } },\n                            [\n                              _c(\n                                \"vue-scroll\",\n                                { attrs: { ops: _vm.scrollStyle } },\n                                [\n                                  _c(\n                                    \"v-list\",\n                                    {\n                                      staticClass: \"py-0\",\n                                      attrs: { dense: \"\" },\n                                    },\n                                    [\n                                      _c(\n                                        \"v-list-item-group\",\n                                        {\n                                          attrs: { color: \"primary\" },\n                                          model: {\n                                            value: _vm.currentPage,\n                                            callback: function ($$v) {\n                                              _vm.currentPage = $$v\n                                            },\n                                            expression: \"currentPage\",\n                                          },\n                                        },\n                                        [\n                                          _vm._l(\n                                            _vm.currentPages,\n                                            function (page, idx) {\n                                              return [\n                                                _c(\n                                                  \"div\",\n                                                  {\n                                                    staticStyle: {\n                                                      display: \"flex\",\n                                                      \"align-items\": \"center\",\n                                                      \"justify-content\":\n                                                        \"center\",\n                                                    },\n                                                  },\n                                                  [\n                                                    _c(\n                                                      \"v-list-item\",\n                                                      {\n                                                        key: \"page-\" + page.id,\n                                                        attrs: {\n                                                          value: page,\n                                                          disabled:\n                                                            !_vm.hasAdminPermission,\n                                                        },\n                                                      },\n                                                      [\n                                                        _c(\n                                                          \"v-list-item-icon\",\n                                                          [\n                                                            _c(\"v-icon\", [\n                                                              _vm._v(\n                                                                \"mdi-text-box\"\n                                                              ),\n                                                            ]),\n                                                          ],\n                                                          1\n                                                        ),\n                                                        _c(\n                                                          \"v-list-item-title\",\n                                                          [\n                                                            _vm._v(\n                                                              _vm._s(page.title)\n                                                            ),\n                                                          ]\n                                                        ),\n                                                      ],\n                                                      1\n                                                    ),\n                                                  ],\n                                                  1\n                                                ),\n                                                idx < _vm.pages.length - 1\n                                                  ? _c(\"v-divider\")\n                                                  : _vm._e(),\n                                              ]\n                                            }\n                                          ),\n                                        ],\n                                        2\n                                      ),\n                                    ],\n                                    1\n                                  ),\n                                ],\n                                1\n                              ),\n                            ],\n                            1\n                          )\n                        : _c(\n                            \"v-alert\",\n                            {\n                              staticClass: \"animated fadeIn\",\n                              attrs: {\n                                text: \"\",\n                                color: \"orange\",\n                                prominent: \"\",\n                                icon: \"mdi-alert\",\n                              },\n                            },\n                            [\n                              _c(\"div\", { staticClass: \"body-2\" }, [\n                                _vm._v(\n                                  _vm._s(\n                                    _vm.$t(\n                                      \"common:pageSelector.folderEmptyWarning\"\n                                    )\n                                  )\n                                ),\n                              ]),\n                            ]\n                          ),\n                    ],\n                    1\n                  ),\n                ],\n                1\n              ),\n              _c(\n                \"v-card-chin\",\n                [\n                  _c(\"v-spacer\"),\n                  _c(\n                    \"v-btn\",\n                    { attrs: { text: \"\" }, on: { click: _vm.close } },\n                    [_vm._v(_vm._s(_vm.$t(\"common:actions.cancel\")))]\n                  ),\n                  _vm.mode === \"move\"\n                    ? _c(\n                        \"v-btn\",\n                        {\n                          staticClass: \"px-4\",\n                          attrs: {\n                            color: \"primary\",\n                            disabled: !_vm.isValidPath,\n                          },\n                          on: { click: _vm.open },\n                        },\n                        [\n                          _c(\"v-icon\", { attrs: { left: \"\" } }, [\n                            _vm._v(\"mdi-check\"),\n                          ]),\n                          _c(\"span\", [\n                            _vm._v(_vm._s(_vm.$t(\"common:actions.move\"))),\n                          ]),\n                        ],\n                        1\n                      )\n                    : _vm.mode !== \"batch-move\"\n                    ? _c(\n                        \"v-btn\",\n                        {\n                          staticClass: \"px-4\",\n                          attrs: {\n                            color: \"primary\",\n                            disabled: !_vm.isValidPath,\n                          },\n                          on: { click: _vm.open },\n                        },\n                        [\n                          _c(\"v-icon\", { attrs: { left: \"\" } }, [\n                            _vm._v(\"mdi-check\"),\n                          ]),\n                          _c(\"span\", [\n                            _vm._v(_vm._s(_vm.$t(\"common:actions.select\"))),\n                          ]),\n                        ],\n                        1\n                      )\n                    : _vm._e(),\n                ],\n                1\n              ),\n            ],\n            1\n          )\n        : _vm.mode === \"batch-move\"\n        ? _c(\n            \"v-card\",\n            { staticClass: \"page-selector\", attrs: { minWidth: 818 } },\n            [\n              _c(\n                \"div\",\n                { staticClass: \"dialog-header is-blue\" },\n                [\n                  _c(\n                    \"v-icon\",\n                    { staticClass: \"mr-3\", attrs: { color: \"white\" } },\n                    [_vm._v(\"mdi-page-next-outline\")]\n                  ),\n                  _c(\"div\", { staticClass: \"body-1\" }, [\n                    _vm._v(_vm._s(_vm.$t(\"common:pageSelector.moveTitle\"))),\n                  ]),\n                  _c(\"v-spacer\"),\n                  _c(\"v-progress-circular\", {\n                    directives: [\n                      {\n                        name: \"show\",\n                        rawName: \"v-show\",\n                        value: _vm.searchLoading,\n                        expression: \"searchLoading\",\n                      },\n                    ],\n                    attrs: {\n                      indeterminate: \"\",\n                      color: \"white\",\n                      size: 20,\n                      width: 2,\n                    },\n                  }),\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"d-flex\" },\n                [\n                  _c(\n                    \"v-flex\",\n                    {\n                      staticClass: \"grey\",\n                      class: _vm.$vuetify.theme.dark ? \"darken-4\" : \"lighten-3\",\n                      attrs: { xs6: \"\" },\n                    },\n                    [\n                      _c(\n                        \"v-toolbar\",\n                        {\n                          attrs: {\n                            color: \"grey darken-3\",\n                            dark: \"\",\n                            dense: \"\",\n                            flat: \"\",\n                          },\n                        },\n                        [\n                          _c(\"div\", { staticClass: \"body-2\" }, [\n                            _vm._v(_vm._s(_vm.$t(\"源文件夹\"))),\n                          ]),\n                          _c(\"v-spacer\"),\n                          _vm.mode === \"batch-move\"\n                            ? _c(\n                                \"v-btn\",\n                                {\n                                  attrs: {\n                                    icon: \"\",\n                                    tile: \"\",\n                                    target: \"_blank\",\n                                  },\n                                  on: {\n                                    click: function ($event) {\n                                      _vm.deleteDialog = true\n                                    },\n                                  },\n                                },\n                                [_c(\"v-icon\", [_vm._v(\"mdi-delete\")])],\n                                1\n                              )\n                            : _vm._e(),\n                          _c(\n                            \"v-dialog\",\n                            {\n                              attrs: { width: \"20%\", persistent: \"\" },\n                              on: {\n                                \"click:outside\": function ($event) {\n                                  _vm.deleteDialog = false\n                                },\n                              },\n                              model: {\n                                value: _vm.deleteDialog,\n                                callback: function ($$v) {\n                                  _vm.deleteDialog = $$v\n                                },\n                                expression: \"deleteDialog\",\n                              },\n                            },\n                            [\n                              _c(\n                                \"v-card\",\n                                [\n                                  _c(\"v-card-title\", [\n                                    _c(\"span\", { staticClass: \"headline\" }, [\n                                      _vm._v(\"确定删除?\"),\n                                    ]),\n                                  ]),\n                                  _vm._v(\" \"),\n                                  _c(\n                                    \"v-card-actions\",\n                                    [\n                                      _c(\n                                        \"v-btn\",\n                                        {\n                                          attrs: {\n                                            color: \"darken-1\",\n                                            text: \"\",\n                                          },\n                                          on: { click: _vm.batchDelete },\n                                        },\n                                        [_vm._v(\"确定\")]\n                                      ),\n                                      _vm._v(\" \"),\n                                      _c(\"v-spacer\"),\n                                      _vm._v(\" \"),\n                                      _c(\n                                        \"v-btn\",\n                                        {\n                                          attrs: {\n                                            color: \"blue darken-1\",\n                                            text: \"\",\n                                          },\n                                          on: {\n                                            click: function ($event) {\n                                              _vm.deleteDialog = false\n                                            },\n                                          },\n                                        },\n                                        [_vm._v(\"取消\")]\n                                      ),\n                                    ],\n                                    1\n                                  ),\n                                ],\n                                1\n                              ),\n                            ],\n                            1\n                          ),\n                        ],\n                        1\n                      ),\n                      _c(\n                        \"div\",\n                        { staticStyle: { height: \"400px\" } },\n                        [\n                          _c(\n                            \"vue-scroll\",\n                            { attrs: { ops: _vm.scrollStyle } },\n                            [\n                              _c(\"v-treeview\", {\n                                key: \"pageTree-\" + _vm.treeViewCacheId,\n                                ref: \"moveSourceTreeview\",\n                                attrs: {\n                                  active: _vm.currentNode,\n                                  open: _vm.openNodes,\n                                  loadedItems: _vm.loadedItems,\n                                  items: _vm.tree,\n                                  \"load-children\": _vm.fetchFoldersAndPages,\n                                  \"expand-icon\": \"mdi-menu-down-outline\",\n                                  \"item-id\": \"path\",\n                                  \"item-text\": \"title\",\n                                  dense: \"\",\n                                  \"open-on-click\": \"\",\n                                },\n                                on: {\n                                  \"update:active\": function ($event) {\n                                    _vm.currentNode = $event\n                                  },\n                                  \"update:open\": function ($event) {\n                                    _vm.openNodes = $event\n                                  },\n                                  \"update:loadedItems\": function ($event) {\n                                    _vm.loadedItems = $event\n                                  },\n                                  \"update:loaded-items\": function ($event) {\n                                    _vm.loadedItems = $event\n                                  },\n                                },\n                                scopedSlots: _vm._u([\n                                  {\n                                    key: \"prepend\",\n                                    fn: function (ref) {\n                                      var item = ref.item\n                                      var open = ref.open\n                                      var leaf = ref.leaf\n                                      return [\n                                        _c(\n                                          \"div\",\n                                          {\n                                            staticStyle: {\n                                              display: \"flex\",\n                                              \"align-items\": \"center\",\n                                              \"justify-content\": \"center\",\n                                            },\n                                          },\n                                          [\n                                            _vm.mode === \"batch-move\" &&\n                                            item.id !== 0\n                                              ? _c(\"v-checkbox\", {\n                                                  staticClass: \"mr-2\",\n                                                  staticStyle: {\n                                                    display: \"contents\",\n                                                  },\n                                                  attrs: { \"hide-details\": \"\" },\n                                                  on: {\n                                                    change: function ($event) {\n                                                      return _vm.onCheckboxChange(\n                                                        $event,\n                                                        item\n                                                      )\n                                                    },\n                                                    click: function ($event) {\n                                                      $event.stopPropagation()\n                                                    },\n                                                  },\n                                                  model: {\n                                                    value: item.checked,\n                                                    callback: function ($$v) {\n                                                      _vm.$set(\n                                                        item,\n                                                        \"checked\",\n                                                        $$v\n                                                      )\n                                                    },\n                                                    expression: \"item.checked\",\n                                                  },\n                                                })\n                                              : _vm._e(),\n                                            _c(\"v-icon\", [\n                                              _vm._v(\n                                                \"mdi-\" +\n                                                  _vm._s(\n                                                    leaf\n                                                      ? item.isFolder\n                                                        ? open\n                                                          ? \"folder-open\"\n                                                          : \"folder\"\n                                                        : \"text-box\"\n                                                      : open\n                                                      ? \"folder-open\"\n                                                      : \"folder\"\n                                                  )\n                                              ),\n                                            ]),\n                                          ],\n                                          1\n                                        ),\n                                      ]\n                                    },\n                                  },\n                                  {\n                                    key: \"label\",\n                                    fn: function (ref) {\n                                      var item = ref.item\n                                      return [\n                                        _c(\"v-hover\", {\n                                          scopedSlots: _vm._u(\n                                            [\n                                              {\n                                                key: \"default\",\n                                                fn: function (ref) {\n                                                  var hover = ref.hover\n                                                  return [\n                                                    _c(\n                                                      \"div\",\n                                                      [\n                                                        !item.editing\n                                                          ? _c(\"span\", [\n                                                              _vm._v(\n                                                                _vm._s(\n                                                                  item.title\n                                                                )\n                                                              ),\n                                                            ])\n                                                          : _vm._e(),\n                                                        _vm._v(\" \"),\n                                                        item.editing\n                                                          ? _c(\"v-text-field\", {\n                                                              ref:\n                                                                \"input-\" +\n                                                                item.id,\n                                                              attrs: {\n                                                                id:\n                                                                  \"input-\" +\n                                                                  item.id,\n                                                                \"hide-details\":\n                                                                  \"\",\n                                                                solo: \"\",\n                                                                \"hide-details\":\n                                                                  \"\",\n                                                                dense: \"\",\n                                                                flat: \"\",\n                                                                clearable: \"\",\n                                                              },\n                                                              model: {\n                                                                value:\n                                                                  item.title,\n                                                                callback:\n                                                                  function (\n                                                                    $$v\n                                                                  ) {\n                                                                    _vm.$set(\n                                                                      item,\n                                                                      \"title\",\n                                                                      $$v\n                                                                    )\n                                                                  },\n                                                                expression:\n                                                                  \"item.title\",\n                                                              },\n                                                            })\n                                                          : _vm._e(),\n                                                      ],\n                                                      1\n                                                    ),\n                                                  ]\n                                                },\n                                              },\n                                            ],\n                                            null,\n                                            true\n                                          ),\n                                        }),\n                                      ]\n                                    },\n                                  },\n                                ]),\n                              }),\n                            ],\n                            1\n                          ),\n                        ],\n                        1\n                      ),\n                    ],\n                    1\n                  ),\n                  _c(\n                    \"v-flex\",\n                    { attrs: { xs6: \"\" } },\n                    [\n                      _c(\n                        \"v-toolbar\",\n                        {\n                          attrs: {\n                            color: \"blue darken-2\",\n                            dark: \"\",\n                            dense: \"\",\n                            flat: \"\",\n                          },\n                        },\n                        [\n                          _c(\"div\", { staticClass: \"body-2\" }, [\n                            _vm._v(_vm._s(_vm.$t(\"目标文件夹\"))),\n                          ]),\n                          _c(\"v-spacer\"),\n                          _vm.path === \"home\" && _vm.mode === \"move\"\n                            ? _c(\n                                \"v-btn\",\n                                {\n                                  attrs: {\n                                    icon: \"\",\n                                    tile: \"\",\n                                    href: \"https://docs.requarks.io/guide/pages#folders\",\n                                    target: \"_blank\",\n                                  },\n                                },\n                                [_c(\"v-icon\", [_vm._v(\"mdi-help-box\")])],\n                                1\n                              )\n                            : _vm._e(),\n                        ],\n                        1\n                      ),\n                      _c(\n                        \"div\",\n                        { staticStyle: { height: \"400px\" } },\n                        [\n                          _c(\n                            \"vue-scroll\",\n                            { attrs: { ops: _vm.scrollStyle } },\n                            [\n                              _c(\"v-treeview\", {\n                                key: \"pageTree-\" + _vm.treeViewCacheId,\n                                ref: \"moveTargetTreeview\",\n                                attrs: {\n                                  active: _vm.batchMove_currentNode,\n                                  open: _vm.batchMove_openNodes,\n                                  items: _vm.batchMove_tree,\n                                  \"load-children\": _vm.fetchFolders,\n                                  \"expand-icon\": \"mdi-menu-down-outline\",\n                                  \"item-id\": \"path\",\n                                  \"item-text\": \"title\",\n                                  dense: \"\",\n                                  activatable: \"\",\n                                },\n                                on: {\n                                  \"update:active\": [\n                                    function ($event) {\n                                      _vm.batchMove_currentNode = $event\n                                    },\n                                    _vm.onNodeActivated,\n                                  ],\n                                  \"update:open\": function ($event) {\n                                    _vm.batchMove_openNodes = $event\n                                  },\n                                },\n                                scopedSlots: _vm._u([\n                                  {\n                                    key: \"prepend\",\n                                    fn: function (ref) {\n                                      var item = ref.item\n                                      var open = ref.open\n                                      var leaf = ref.leaf\n                                      return [\n                                        item.isFolder === true || item.id === 0\n                                          ? _c(\"v-icon\", [\n                                              _vm._v(\n                                                \"mdi-\" +\n                                                  _vm._s(\n                                                    open\n                                                      ? \"folder-open\"\n                                                      : \"folder\"\n                                                  )\n                                              ),\n                                            ])\n                                          : _vm._e(),\n                                      ]\n                                    },\n                                  },\n                                  {\n                                    key: \"label\",\n                                    fn: function (ref) {\n                                      var item = ref.item\n                                      return [\n                                        item.isFolder === true || item.id === 0\n                                          ? _c(\"v-hover\", {\n                                              scopedSlots: _vm._u(\n                                                [\n                                                  {\n                                                    key: \"default\",\n                                                    fn: function (ref) {\n                                                      var hover = ref.hover\n                                                      return [\n                                                        _c(\n                                                          \"div\",\n                                                          [\n                                                            !item.editing\n                                                              ? _c(\"span\", [\n                                                                  _vm._v(\n                                                                    _vm._s(\n                                                                      item.title\n                                                                    )\n                                                                  ),\n                                                                ])\n                                                              : _vm._e(),\n                                                            _vm._v(\" \"),\n                                                            hover &&\n                                                            !item.editing &&\n                                                            _vm.hasAdminPermission\n                                                              ? _c(\"v-icon\", {\n                                                                  staticClass:\n                                                                    \"mdi mdi-plus\",\n                                                                  class: {\n                                                                    \"icon-operate\":\n                                                                      hover,\n                                                                  },\n                                                                  staticStyle: {\n                                                                    \"margin-right\":\n                                                                      \"0.5em\",\n                                                                  },\n                                                                  on: {\n                                                                    click:\n                                                                      function (\n                                                                        $event\n                                                                      ) {\n                                                                        return _vm.createFolder(\n                                                                          item,\n                                                                          true\n                                                                        )\n                                                                      },\n                                                                  },\n                                                                })\n                                                              : _vm._e(),\n                                                            _vm._v(\" \"),\n                                                            item.id != 0 &&\n                                                            hover &&\n                                                            !item.editing &&\n                                                            _vm.hasAdminPermission\n                                                              ? _c(\"v-icon\", {\n                                                                  staticClass:\n                                                                    \"mdi mdi-pencil\",\n                                                                  class: {\n                                                                    \"icon-operate\":\n                                                                      hover,\n                                                                  },\n                                                                  on: {\n                                                                    click:\n                                                                      function (\n                                                                        $event\n                                                                      ) {\n                                                                        return _vm.editFolder(\n                                                                          item\n                                                                        )\n                                                                      },\n                                                                  },\n                                                                })\n                                                              : _vm._e(),\n                                                            _vm._v(\" \"),\n                                                            item.editing\n                                                              ? _c(\n                                                                  \"v-text-field\",\n                                                                  {\n                                                                    ref:\n                                                                      \"input-\" +\n                                                                      item.id,\n                                                                    attrs: {\n                                                                      id:\n                                                                        \"input-\" +\n                                                                        item.id,\n                                                                      \"hide-details\":\n                                                                        \"\",\n                                                                      solo: \"\",\n                                                                      dense: \"\",\n                                                                      flat: \"\",\n                                                                      clearable:\n                                                                        \"\",\n                                                                    },\n                                                                    model: {\n                                                                      value:\n                                                                        item.title,\n                                                                      callback:\n                                                                        function (\n                                                                          $$v\n                                                                        ) {\n                                                                          _vm.$set(\n                                                                            item,\n                                                                            \"title\",\n                                                                            $$v\n                                                                          )\n                                                                        },\n                                                                      expression:\n                                                                        \"item.title\",\n                                                                    },\n                                                                  }\n                                                                )\n                                                              : _vm._e(),\n                                                          ],\n                                                          1\n                                                        ),\n                                                      ]\n                                                    },\n                                                  },\n                                                ],\n                                                null,\n                                                true\n                                              ),\n                                            })\n                                          : _vm._e(),\n                                      ]\n                                    },\n                                  },\n                                ]),\n                              }),\n                            ],\n                            1\n                          ),\n                        ],\n                        1\n                      ),\n                    ],\n                    1\n                  ),\n                ],\n                1\n              ),\n              _c(\n                \"v-card-chin\",\n                [\n                  _c(\"v-spacer\"),\n                  _c(\n                    \"v-btn\",\n                    { attrs: { text: \"\" }, on: { click: _vm.close } },\n                    [_vm._v(_vm._s(_vm.$t(\"common:actions.cancel\")))]\n                  ),\n                  _vm.mode === \"batch-move\"\n                    ? _c(\n                        \"v-btn\",\n                        {\n                          staticClass: \"px-4\",\n                          attrs: {\n                            color: \"primary\",\n                            disabled: !_vm.isValidPath,\n                          },\n                          on: { click: _vm.batchMove },\n                        },\n                        [\n                          _c(\"v-icon\", { attrs: { left: \"\" } }, [\n                            _vm._v(\"mdi-check\"),\n                          ]),\n                          _c(\"span\", [\n                            _vm._v(_vm._s(_vm.$t(\"common:actions.move\"))),\n                          ]),\n                        ],\n                        1\n                      )\n                    : _vm.mode !== \"batch-move\"\n                    ? _c(\n                        \"v-btn\",\n                        {\n                          staticClass: \"px-4\",\n                          attrs: {\n                            color: \"primary\",\n                            disabled: !_vm.isValidPath,\n                          },\n                          on: { click: _vm.open },\n                        },\n                        [\n                          _c(\"v-icon\", { attrs: { left: \"\" } }, [\n                            _vm._v(\"mdi-check\"),\n                          ]),\n                          _c(\"span\", [\n                            _vm._v(_vm._s(_vm.$t(\"common:actions.select\"))),\n                          ]),\n                        ],\n                        1\n                      )\n                    : _vm._e(),\n                ],\n                1\n              ),\n            ],\n            1\n          )\n        : _vm._e(),\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n\n//# sourceURL=webpack:///./client/components/common/page-selector.vue?./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/pug-plain-loader!./node_modules/vue-loader/lib??vue-loader-options");

/***/ })

})